#+TITLE: 100 Days Of Code - Log

* Day 0: October 05, 2018

** Today's Progress
+ Set up basic evironment
+ System: Mac Mojave
+ Editor: Emacs
+ Emacs dotfiles:
  
* Day 1: October 06, 2018

** Today's Progress
+ Finished Week one lessions video.
+ Set up Ocaml evironment with Emacs.
+ Write some basic ocaml code.
  
** Thoughts:
Ocaml is similar with Standard ML, And has lots of advantage.For example

The key additional ingredients
+ type inference: you don’t need to
write them!
+ pattern-matching: life saving data
manipulation feature!

In 2000 Jacques Garrigue’s extended Objective Label branch with
polymorphic methods, labeled and optional arguments, and polymorphic
variants, and In 2011 the name is definitely changed to Ocaml.

* Day 2: October 07, 2018

** Today's Progress
Read these materials.
[[http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html][The lanbda Calculus for Absolute Dummies]]
[[https://www.fun-mooc.fr/asset-v1:parisdiderot+56002+session03+type@asset+block/pdf_backus_turingaward_lecture.pdf][Can Programming Be Liberated from the von Neumann Style? A Functonal and ItsAlgebra of Programs]]

** Thoughts:
Turing Maching is designed for complicated calucations. It combing two parts ,
First is condition, Second is do, Just like If condition then do.


* Day 3: October 08, 2018 

** Today's Progress
+ Learn some basic ocaml syntax.
+ Read Real World Ocaml 
+ Try to install utop in Emacs, but not success
+ Write some notes about functional programming
  
** Thoughts:

 Why choose ocaml for learning.
 Beacuse, The learning curve of Ocaml is less than Haskell. and Ocaml is easy to
 work. For example, After finished ,I can choose Reasonml for further advance
 learning. Reasonml is created by Facebook, just like clojurescript,
 typescript.. Second Ocaml community is very nice to newbee, and As a Emacser
 can write ocaml than any other editor or IDE user. Third Ocaml is fu....ing insteresting. 

* Day 4: October 09, 2018

** Today's Progress
+ Read Real World Ocaml
+ Write somthing about Ocaml syntax
  
** Thoughts:

Programming languages have base types, like int, bool, and unit and 
Compound types.

+ “Each-of”: A compound type t describes values that contain each of values of type t1, t2, ..., and tn.
+ “One-of”: A compound type t describes values that contain a value of one of the types t1, t2, ..., or tn.
+ “Self-reference”: A compound type t may refer to itself in its definition in order to describe recursive data structures like lists and trees.

* Day 5: October 10, 2018

** Today's Progress
+ Read Real World Ocaml
+ Try to solve org-babel ocaml problem:
  Error: Unbound module Base
+ Learn something Ocaml syntax: Records and Variant, pattern-matching
+ Write notes about what I have learnt today
  
** Thoughts:

Ocaml is similar with Emacs in some field, For example, ocaml has init file
Named .ocamlinit. It helps ocaml load module, but something wrong with org-mode.
When I write some like this.

#+BEGIN_SRC ocaml
open Base;;

#+END_SRC

the results returned Error:
Error: Unbound module Base.

I set ocaml init file in current diretory, (.ocamlinit).

#+BEGIN_SRC ocaml


(* Ensure that we're in the root of the project. This is helpful for
   editor integration where the cwd might not be the root of the
   project.*)
let root =
  let rec search path = match Sys.file_exists (path ^ "/.ocamlinit") with
  | false -> search (Filename.dirname path)
  | true -> path
  in search (Sys.getcwd ())
in Sys.chdir root;;

#use "topfind";;
#require "batteries";;
#require "core";;
#require "async";;
#require "cohttp";;
#require "cohttp.async";;
#directory "_build";;

#+END_SRC

But the top of repl return error.

Cannot find file topfind.
Unknown directive 'require'

To sum up, may be tomorrow, I can fix this.

* Day 6: October 12, 2018

** Today's Progress
+ Read Real World Ocaml
+ Watch week two video
+ Do some exercise of week two
  
** Thoughts

I changed OCaml Repl to utop, It is a perpect tool to interactive with code.
Specially, Write code on org-mode, Maybe the most comfortable experience than
any other languages on org-mode.


* Day 7: October 13, 2018

** Today's Progress
+ Watch Week two video
+ Do some exercise of week two
+ Read why Functonal programming matters
  
** Thoughts 
Modularity is the key to successful programming, New scope rules and mechanisms
for seqarate compliation are not Enough.

To support module programming, a languages must provide good glue
Functonal programming languages provide two new kinds of glue
higher-order functions and lazy evaluation. So functional programs are so much
smaller and eaiser to write than conventional ones.

* Day 8: October 14, 2018

** Today's Progress

+ Watch Week three video
+ Finished Week two exercise
+ Read Real World OCaml
  
** Thoughts

 Records: Another Approach to “Each-of” Types
 
 Record types are “each-of” types where each component is a named field. For example, the type
{foo : int, bar : int*bool, baz : bool*int} describes records with three fields
named foo, bar, and baz. This is just a new sort of type, just like tuple types
were new when we learned them.A record expression builds a record value. For example, the expression
{bar = (1+2,true andalso true), foo = 3+4, baz = (false,9) } would evaluate to
the record value {bar = (3,true), foo = 7, baz = (false,9)}, which can have type
{foo : int, bar : int*bool, baz : bool*int} because the order of fields never
matters(we use the field names instead). In general the syntax for a record
expression is {f1 = e1, ..., fn = en} where,as always, each ei can be any
expression. Here each f can be any field name (though each must be different). 
A field name is basically any sequence of letters or numbers.
In ML, we do not have to declare that we want a record type with particular
field names and field types — we just write down a record expression and the
type-checker gives it the right type. The type-checking rules for record
expressions are not surprising: Type-check each expression to get some type ti
and then build the record type that has all the right fields with the right
types.Because the order of field names never matters, the REPL always
alphabetizes them when printing just for consistency.

* Day 9: October 15, 2018

** Today's Progess

+ Watch Week three video
+ Read Real World OCaml

** Thoughts
 Records and tuples are very similar. They are both "each-of" constructs that
 allow any number of components. The only real difference is that records are
 "by name" and tuples are "by position". This means with records we build them 
 and access their by using field name, But tuples access their by position.
 
 By name versus by poisition is a classic decision when designing a languages.

* Day 10: October 16, 2018

** Today's Progress

+ Watch Week three video
+ Read Real World OCaml
  
** Thoughts

1. When you write (e1, ..... , en) it is another way of writing
   {1=e1,....,n=en}, a tuple expression is a record expression with field names
   1,2,...n.
   
2. The type t1 * ... * tn is just another way of writing{1: t1,...,n:tn}
   
3. Notice that #1 2, #1 e, means: get the contents of field named 1, 2, etc.
   
Tuples are just syntacti sugar for records with fields named 1,2....,n
It is syntactic because we can descirbe everythng about tuples in terms of
equivalent record syntax. It is sygar beacuse it makes the language sweeter. The 
term syntactic sugar is widely used. Syntactic sygar is great way to keep the
key ideas in programming-language small

* Day 11: October 18, 2018

** Today's Progress
+ Read Real World OCaml
  
** Thoughts

Optional arguments in OCaml

#+BEGIN_SRC ocaml
let concat ?sep x y =
  let sep = match sep with None -> "" | Some x -> x in
  x ^ sep ^ y

#+END_SRC

#+RESULTS:
: val concat :
:   ?sep:Base.String.t -> Base.String.t -> Base.String.t -> Base.String.t =
:   <fun>

And also could same results

#+BEGIN_SRC ocaml
let concat ?(sep="") x y = x ^ sep ^ y
#+END_SRC

#+RESULTS:
: val concat :
:   ?sep:Base.String.t -> Base.String.t -> Base.String.t -> Base.String.t =
:   <fun>

when without optional arguments

#+BEGIN_SRC ocaml
concat "A" "B"

#+END_SRC

#+RESULTS:
: "AB"

Need optional arguments

#+BEGIN_SRC ocaml
concat ~sep:":" "A" "B"

#+END_SRC

#+RESULTS:
: "A:B"

#+BEGIN_SRC ocaml
concat "A" ~sep:":" "B"
 
#+END_SRC

#+RESULTS:
: "A:B"

When to erase optional arguments

#+BEGIN_SRC ocaml
let prepend_pound = concat "# "
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
prepend_pound "a BASH comment"
#+END_SRC

#+RESULTS:
: "# a BASH comment"

#+BEGIN_SRC ocaml
prepend_pound "a BASH comment" ~sep:":" "Hello"
#+END_SRC

#+RESULTS:
: Characters 0-13:
:   prepend_pound "a BASH comment" ~sep:":" "Hello";;
:   ^^^^^^^^^^^^^
: Error: This function has type Base.String.t -> Base.String.t
:        It is applied to too many arguments; maybe you forgot a `;'.

Somthing Wrong happened.

 Characters 0-13:
   prepend_pound "a BASH comment" ~sep:":";;
   ^^^^^^^^^^^^^
 Error: This function has type Base.String.t -> Base.String.t
        It is applied to too many arguments; maybe you forgot a `;'.

Optional arguments is earsed as soon as the first positional arguments defined
after the optional argument is passed in 


* Day 12: October 19, 2018

** Today's Progress 
+ Just Read Real World Ocaml

** Thoughts

How ML Provides Access to Datatype Values: Case Expressions
In one sense, a case-expression is like a more powerful if-then-else expression
Like a conditional expression, it evaluates two of its subexpressions: first the 
expression between the case and of keywords and second the expression in the
first branch that matches. But instead of having two branches (one for true and one
for false), we can have one branch for each variant of our datatype (and we will generalize
this further below). Like conditional expressions, each branch’s expression must have
the same type (int in the example above) because the type-checker cannot know what
branch will be used.

* Day 13: October 20, 2018

** Today's Progress 
+ Read Real World OCaml

** Thoughts
+ List.fold is a very general and powerful function.
+ In ML language ,pattern matching is powerful than if statement

* Day 14: October 21, 2018

** Today's Progess
+ Read Real World Ocaml
+ Watch Week four videos
+ Learn Standard_ML
  
** Thoughts
+ How to writing efficient recursive functions in functional language
+ How to use accumulators as technigue to make some function tail recursive
  
#+BEGIN_SRC sml
fun sum1 xs = 
    case xs of 
        [] -> 0
     | i:xs' => i + sum1 xs';;

#+END_SRC

#+RESULTS:
: stdIn:10.12 Error: syntax error found at ARROW

#+BEGIN_SRC sml
fun sum2 xs = 
    let fun f (xs,acc) = 
            case xs of 
                [] -> acc
             | i::xs' => f(xs', i+acc)
    in 
        f(xs,0)
    end;;

#+END_SRC

#+RESULTS:
: stdIn:4.20 Error: syntax error found at ARROW

Both functions compute the same results, but sumw using a local helper function
takes an extra arguments, called acc for "accumulators"

* Day 15: October 22, 2018

** Today's Progress
+ Read Real World OCaml
+ Learn how to use Dune

** Thoughts 

Dune is something similar lein in Clojure. It is a project creater build our
app.
dune files are written using S-expressions (those lisp-y parentheses). Each of 
the top-level elements are called stanzas, and currently we have one stanzas.

Simplest usesage

+ Creat a Dun file 
  #+BEGIN_SRC scheme

  (executable
    (name main))

  #+END_SRC


+ Creat a ml file
  
  #+BEGIN_SRC ocaml

  let () = 
    print_endline "Hello, world"

  #+END_SRC
  
+ Build Dune
  
#+BEGIN_SRC sh
dune build main.exe

#+END_SRC

+ Finally run main.exe
  
#+BEGIN_SRC sh
dune exec ./main.exe

#+END_SRC

Hello, World!


* Day 16: October 24, 2018

** Today's Progress

+ Watch Week Four Video
+ Watch coursera Standard_ML week three video
+ Read Real World OCaml
  
** Thoughts

let <variable> = <expr>

expr can be function or variable 

#+BEGIN_SRC ocaml
let x = 3;;

#+END_SRC

#+RESULTS:
: 3

but in ocaml can't use record in let 
#+BEGIN_SRC ocaml
let x = {name : Stone}

#+END_SRC


: Characters 21-22:
:   let x = {name : Stone};;
:                        ^
: Error: Syntax error

When function in let expr 

#+BEGIN_SRC ocaml
let transforms = [ String.uppercase, String.lowercase ]
#+END_SRC

#+RESULTS:
: val transforms :
:   ((Base.string -> Base.string) * (Base.string -> Base.string)) Base__List.t =
:   [(<fun>, <fun>)]


* Day 17: October 25, 2018

** Today's Progress
+ Watch Week Four Video
+ Do Week Four Exercises and homewok
  
  
** Thoughts
Where reasonably elegant, feasible, and important, 
rewriting functions to be tail-recursive can be much more efficient
+ Tail-recursive: recursive calls are tail-calls
  

There is a methodology that can often guide this transformation:
+ Create a helper function that takes an accumulator
+ Old base case becomes initial accumulator
+ New base case becomes final accumulator
  
#+BEGIN_SRC sml
fun fact n =
    let fun aux(n,acc) =
           if n=0
           then acc
           else aux(n-1,acc*n)
    in
       aux(n,1)
    end
val x = fact 3

#+END_SRC

#+BEGIN_SRC ocaml
fun sum xs =
   case xs of
       [] => 0
     | x::xs’ => x + sum xs’

#+END_SRC

#+BEGIN_SRC ocaml 
fun sum xs =
    let fun aux(xs,acc) =
      case xs of 
        [] => acc
        | x::xs’ => aux(xs’,x+acc)
    in
       aux(xs,0)
    end

#+END_SRC

1. For fact and sum, tail-recursion is faster but both ways linear time
2. Non-tail recursive rev is quadratic because each recursive call
   uses append, which must traverse the first list
   + And 1+2+...+(length-1) is almost length*length/2
   + Moral: beware list-append, especially within outer recursion
3. Cons constant-time (and fast), so accumulator version much better
 
* Day 18: October 29, 2018

** Today's Progress
+ Watch Week Four Video
+ Read Real World Ocaml
+ Read OCaml for very beginner
  
** Thoughts
Table: Complex of Matching and Unification Problems

| E | Matching    | Undification |
|---+-------------+--------------|
| ¢ | linear      | linear       |
| U | NP-complete | Np-complete  |
| I | Np-complete | Np-complete  |
|   |             |              |

......


#+TBLFM: 


As the table indicates, in most cases, both matching and unification
problems turn out to be of the same order of complexity even though matching
problem is a special case of the unification problem. The complexity
does not seem to grow even when additional properties of function symbols
are assumed in some cases.

It also appears that for linear terms (terms in which every variable appears
uniquely), both matching and unification problems are easier than for
nonlinear terms (for matching, only the pattern has to be linear). This perhaps
suggests that one of the main sources of complexity is the nonlinearity
of terms. 

* Day 19: October 30, 2018
** Today's Progress
+ Read OCaml for very beginner
  
** Thoughts
*Two Different Ways of Thinking*

#+BEGIN_SRC ocaml
let rec append a b = 
  match a with
    [] -> b
  | h::t -> h :: append t b

#+END_SRC

#+RESULTS:
: <fun>

To imagine the actions the computer might take to calculate the result:

+ Look at the first. If it is empty, return the second list, Otherwise, pull
  apart the first list, looking at its head and tail. Make a recursive call
  to append the tail to the second list, and then cons the head onto the 
  result. Return this.
  
Consider each match case to be an independent statement of truth, thinking the 
same way about the whole function

+ The empty list appende to another list is that list, Otherwise, the first list
  is non-empty, so it has a head and tail , Call them h and t, Clearly append 
  (h :: t) b is equal to h :: append t b, Since this reduces the problem size, 
  progress is made.

  
* Day 20: October 31, 2018

** Today's Progress
+ Read OCaml for very beginner
  
** Thoughts
*Taking Functions as Arguments*

The most common use of first-class functions is passing them as arguments to 
other functions, so we motivate this use first.

Here is a first example of a function that takes another function:

#+BEGIN_SRC sml

fun n_times (f, n, x) = 
    if n=0
    then x 
    else f (n_times(f, n-1, x))

#+END_SRC




We can tell the argument f is a function because the last line calls f 
with an argument. What n_times does is compute f(f(...(f(x)))) where the 
number of calls to f is n. That is a genuinely useful helper function to 
have around. For example, here are 3 different uses of it:

#+BEGIN_SRC sml

fun double x = x+x
                     

#+END_SRC

#+BEGIN_SRC ocaml

fun increment x = x+1

#+END_SRC

Like any helper function, n_times lets us abstract the common parts of multiple
computations so we can reuse some code in different ways by passing in different
arguments. The main novelty is making one of those arguments a function, which
is a powerful and flexible programming idiom. It also makes perfect sense — we are
not introducing any new language constructs here, just using ones we already 
know in ways you may not have thought of.

Once we define such abstractions, we can find additional uses for them. 
For example, even if our program today does not need to triple any values 
n times, maybe tomorrow it will, in which case we can just define the function
*triple_n_times* using *n_times*:


#+BEGIN_SRC ocaml

fun triple x = 3*x

fun triple_n_times (n, x) = n_times(triple, n, x)

#+END_SRC


* Day 21: November 2, 2018

** Today's Progress
+ Read OCaml for very beginner

** Thoughts
*Anonymous functions*

There is no reason that a function like triple that is passed to another function like
 n_times needs to be defined at top-level. As usual, it is better style to
 define such functions locally if they are needed only locally. So we could write:
 
#+BEGIN_SRC sml

fun triple_n_times (n,x) =
  let fun triple x = 3*x in n_times(triple,n,x) end

#+END_SRC

In fact, we could give the triple function an even smaller scope: we need it only as
the first argument to n_times, so we could have a let-expression there that evaluates 
 to the triple function:
 
 #+BEGIN_SRC sml
fun triple_n_times (n,x) = n_times((let fun triple y = 3*y in triple end), n, x)

 #+END_SRC
 
 Notice that in this example, which is actually poor style, we need to have the
 let-expression “return” triple since, as always, a let-expression produces the 
 result of the expression between in and end. In this case, we simply look up triple 
 in the environment, and the resulting function is the value that we then pass
 as the first argument to n_times.
 
 ML has a much more concise way to define functions right where you use them, as
in this final, best version:

#+BEGIN_SRC ocaml

fun triple_n_times (n, x) = n_times ((fn y => 3 * y), n, x)

#+END_SRC

This code defines an anonymous function fn y => 3*y. It is a function that takes 
an argument y and has body 3*y. The fn is a keyword and => (not =) is also part 
of the syntax. We never gave the function a name (it is anonymous, see?), which 
is convenient because we did not need one. We just wanted to pass a function to 
n_times, and in the body of n_times, this function is bound to f.

It is common to use anonymous functions as arguments to other functions Moreover,
you can put an anonymous function anywhere you can put an expression — it
simply is a value, the function itself. The only thing you cannot do with an 
anonymous function is recursion, exactly because you have no name to use for 
the recursive call. In such cases, you need to use a fun binding as before,
and fun bindings must be in let-expressions or at top-level.

For non-recursive functions, you could use anonymous functions with val 
bindings instead of a fun binding. For example, these two bindings are exactly 
the same thing:

#+BEGIN_SRC sml
fun increment x = x + 1
val increment = fn x => x+1

#+END_SRC


They both bind increment to a value that is a function that returns its argument
plus 1. So function-bindings are almost syntactic sugar, but they support
recursion, which is essential.

* Day 22: November 7, 2018

** Today's Progress
+ Read OCaml for very beginner
+ Watch Week Five Video
+ Finish Week Four exercise
  
** Thoughts
*** Maps and Filters

Higher-order function over lists

#+BEGIN_SRC sml
fun map (f, xs) = 
    case xs of
        [] => []
     | x::xs' => (f x)::(map(f, xs'));; 

#+END_SRC

#+RESULTS:

val map = fn : ('a -> 'b) * 'a list -> 'b list


The map function takes a list and a function f and produces a new 
list by applying f to each element of the list. Here are two example uses:

#+BEGIN_SRC sml
fun increment x = x + 1
#+END_SRC

#+RESULTS:
 val increment = fn : int -> int

#+BEGIN_SRC sml
val x1 = map (increment, [4, 8, 12, 16])

#+END_SRC

#+RESULTS:
 val x1 = [5,9,13,17] : int list

#+BEGIN_SRC sml
val x2 = map (hd, [[1,2], [3,4], [5,6,7]])

#+END_SRC

#+RESULTS:
 val x2 = [1,3,5] : int list

The definition and use of map is an incredibly important idiom 
even though our particular example is simple. We could have easily
written a recursive function over lists of integers that incremented
all the elements, but instead we divided the work into two parts: 
The map implementer knew how to traverse a recursive data structure, 
in this case a list. The map client knew what to do with the data there, 
in this case increment each number. You could imagine either of these 
tasks — traversing a complicated piece of data or doing some calculation 
for each of the pieces — being vastly more complicated and best done by 
different developers without making assumptions about the other task. That 
is exactly what writing map as a helper function that takes a function lets us do.

Here is a second very useful higher-order function for lists
#+BEGIN_SRC sml
fun filter (f, xs) = 
    case xs of 
        [] -> []
     |  x::xs' => if f x
                     then x::(filter (f, xs'))
                     else filter (f, xs');;
#+END_SRC

#+RESULTS:
: stdIn:21.10-21.16 Error: syntax error: deleting  RBRACKET ARROW LBRACKET

*** Returning functons
#+BEGIN_SRC sml
fun double_or_triple f = 
      if f 7
      then fn x => 2*x
      else fn x => 3*x;;

#+END_SRC

#+RESULTS:
val double_or_triple = fn : (int -> bool) -> int -> int


* Day 23: November 8, 2018

** Today's Progress
+ Read OCaml from very beginning
  
** Thoughts
*** Not just for numbers and lists
Because ML programs tend to use lists a lot, you might forget
that higher-order functions are useful for more than lists. Some
of our first examples just used integers. But higher-order functions 
also are great for our own data structures. Here we use an is_even 
function to see if all the constants in an arithmetic expression are 
even. We could easily reuse true_of_all_constants for any other property 
we wanted to check. 
 
#+BEGIN_SRC sml
datatype exp = Constant of int | Negate of exp | Add of exp * exp | Multiply of exp * exp;;
#+END_SRC

#+RESULTS:
: datatype exp
:   = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp

#+BEGIN_SRC sml

fun true_of_all_constants(f,e) =
    case e of
     Constant i => f i
   | Negate e1  => true_of_all_constants(f, e1)
   | Add(e1,e2) => true_of_all_constants(f,e1) andalso true_of_all_constants(f,e2)
   | Multiply(e1,e2) => true_of_all_constants(f,e1) andalso true_of_all_constants(f,e2);;

#+END_SRC

#+RESULTS:

val true_of_all_constants = fn : (int -> bool) * exp -> bool

#+BEGIN_SRC sml
fun all_even e = true_of_all_constants(is_even,e);;

#+END_SRC

#+RESULTS:

* Day 24: November 13, 2018

** Today's Progress
+ Finished Read OCaml from very beginning
  
** Thoughts
*** What is functional programming

"Functional programming" can mean a few different things:
1. Avoiding mutation in most/all cases (done and ongoing)
2. Using functions as values (this section)
   
+ Style encouraging recursion and recursive data structures
+ Style closer to mathematical definitions
+ Programming idioms using laziness (later topic, briefly)
+ Anything not OOP or C? (not a good definition)
  
Not sure a definition of “functional language” exists beyond “makes
functional programming easy / the default / required”

- No clear yes/no for a paricular language
 
*** First-class functions
+ First-class functions: Can use them wherever we use values
  + Functions are values too
  + Arguments, results, parts of tuples, bound to variables,
    carried by datatype constructors or exceptions, ...
    
#+BEGIN_SRC sml
fun double x = 2 * x;;
fun incr x = x + 1;;
val a_tuple = (double, incr, double(incr 7));;
#+END_SRC

#+RESULTS:
: val incr = fn : int -> int
Function Closures
+ Function closure: Functions can use bindings from outside the function
  definition (in scope where function is defined)
  - Makes first-class functions much more powerful
  - Will get to this feature in a bit, after simpler examples
+ Distinction between terms first-class functions and function closures is not universally understood
  - Important conceptual distinction even if terms get muddled

* Day 25: November 19, 2018

** Today's progress
+ Read Lambda-Calculus and Combinators, an Introduction
** Thoughts
*** Functions as arguments
+ We can pass one function as an argument to another function
   – Not a new feature, just never thought to do it before
   
+ Elegant strategy for factoring out common code
  Replace N similar functions with calls to 1 function where
   you pass in N different (short) functions as arguments
   
  #+BEGIN_SRC sml
fun n_times (f,n,x) =
   if n=0
   then x
   else f (n_times(f,n-1,x))
fun double x = x + x
fun increment x = x + 1
val x1 = n_times(double,4,7)
val x2 = n_times(increment,4,7)
val x3 = n_times(tl,2,[4,8,12,16])
fun double_n_times (n,x) = n_times(double,n,x)
fun nth_tail (n,x) = n_times(tl,n,x)

  #+END_SRC
